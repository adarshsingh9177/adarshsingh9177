import numpy as np
import pygame,sys
#initialize krne k liye
pygame.init()
#variables
WIDTH=600
HEIGHT=600
RED=(255,0,0)
LINE_WIDTH=15
BOARD_ROWS=3
BOARD_COLS= 3
LINE_COLOR=(0,0,0)
CIRCLERADIUS=60
CIRCLEWIDTH=15
CROSSWIDTH=30
SPACE = 55
PLAYER1=0
PLAYER2=0
 #screen bnayi pehle
screen=pygame.display.set_mode((WIDTH,HEIGHT))

#red button kaam krane k liye
pygame.display.set_caption('TIC TAC TOE')

#board
board=np.zeros((BOARD_ROWS,BOARD_COLS))
#print(board)

screen.fill((100,170,180))
#pygame.draw.line(screen,RED, (10,10),(300,300),10)



def draw_lines():
     pygame.draw.line(screen, LINE_COLOR, (0,200),(600,200),LINE_WIDTH)
     
     pygame.draw.line(screen, LINE_COLOR, (0,400),(600,400),LINE_WIDTH)


     pygame.draw.line(screen, LINE_COLOR, (200,0),(200,600),LINE_WIDTH)

     pygame.draw.line(screen, LINE_COLOR, (400,0),(400,600),LINE_WIDTH) 
     

def drawfigure():
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            if board[row][col]==1:
                pygame.draw.circle(screen,RED,(int(col*200+100),int(row*200+100)),CIRCLERADIUS,CIRCLEWIDTH) 
            elif board[row][col]==2:
                pygame.draw.line(screen,RED, (col*200+SPACE,row*200+200-SPACE),(col*200+200-SPACE,row*200+SPACE),CROSSWIDTH)  
                pygame.draw.line(screen,RED, (col*200+SPACE,row*200+SPACE), (col*200+200-SPACE,row*200+200-SPACE),CROSSWIDTH)    
def mark_square(row,col,player):
    board[row][col]=player
def availablesquare(row,col):
    return board[row][col]==0
    '''if board[row][col]==0:
        return True
    else:
        return False'''    
def isboardfull():
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            if board [row][col]==0:
                 return False
    return True             

#checking middle value
def checkwin(player):
    
    for col in range(BOARD_COLS):
        if board[0][col]==player and board[1][col]== player and board[2][col]==player:
            dwarverticlewinningline(col, player)
            return True

    for row in range(BOARD_ROWS):
        if board[row][0]==player and board[row][1]==player and board[row][2]==player:
            drawhoriontalwinningline(row, player)
            return True
    if board[2][0]==player and board[1][1]==player and board[0][2]==player:
        drawascdiagonal(player)
        return True

    if board[0][0]==player  and board[1][1]==player and board[2][2]==player:                  
        drawdscdiagonal(player)
        return True
    return False    
def dwarverticlewinningline(col,player):
    posX = col * 200+100
    pygame.draw.line(screen,RED, (posX,15), (posX,HEIGHT-15),15)

def drawhoriontalwinningline(row,player):
    posY=row*200+100
    #if player==1:
     #color=CIRCLECOLOR
     #elif plyaer==2:
      #color=crosscolor
    pygame.draw.line(screen,RED,(15,posY), (WIDTH-15,posY),15)  
def drawascdiagonal(player):
    pygame.draw.line(screen,RED, (15,HEIGHT-15), (WIDTH-15,15),15)
def drawdscdiagonal(player):
    pygame.draw.line(screen,RED,(15,15),(WIDTH-15,HEIGHT-15),15)
def restart():
    screen.fill((100,170,180))
    draw_lines()
    player = 1
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            board[row][col]=0
draw_lines()
player = 1
gameover=False
#screen ko rokne k lie jo loop lga 
while True:
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
           sys.exit()
        if event.type==pygame.MOUSEBUTTONDOWN and not gameover:

            mouseX=event.pos[0]#x
            mouseY=event.pos[1]#y
            clickedrow=int (mouseY // 200)
            clickedcol=int (mouseX // 200)

            print(clickedrow)
            print(clickedcol)
            if availablesquare(clickedrow, clickedcol):
                 if player==1:
                     mark_square(clickedrow, clickedcol, 1)
                     if checkwin(player):
                           gameover=True

                     player = 2
                 elif player==2:
                     mark_square(clickedrow, clickedcol, 2)
                     if checkwin(player):
                         gameover=True
                     player= 1
                 drawfigure() 
        if event.type==pygame.KEYDOWN:
            if event.key == pygame.K_r:
               restart()                              
               gameover=False     
    pygame.display.update()      
